head	1.11;
access;
symbols;
locks
	umair:1.11; strict;
comment	@ * @;


1.11
date	2017.09.14.09.36.22;	author umair;	state Exp;
branches;
next	1.10;

1.10
date	2017.09.14.09.35.35;	author umair;	state Exp;
branches;
next	1.9;

1.9
date	2017.09.14.09.28.19;	author umair;	state Exp;
branches;
next	1.8;

1.8
date	2017.09.14.09.17.19;	author umair;	state Exp;
branches;
next	1.7;

1.7
date	2017.09.14.09.05.43;	author umair;	state Exp;
branches;
next	1.6;

1.6
date	2017.09.14.08.59.50;	author umair;	state Exp;
branches;
next	1.5;

1.5
date	2017.09.14.08.55.44;	author umair;	state Exp;
branches;
next	1.4;

1.4
date	2017.09.14.08.54.18;	author umair;	state Exp;
branches;
next	1.3;

1.3
date	2017.09.14.08.53.20;	author umair;	state Exp;
branches;
next	1.2;

1.2
date	2017.09.14.06.48.50;	author umair;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.22.18.18.12;	author umair;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@#include"header.h"
#include"prototype.h"
int insertkey(struct node *strt)
{
	struct node *temp;
	int n,i=0;
	int k = 500;
	temp = creatnode();
	printf("give the position after which the new node to be inserted\n");
	scanf("%d",&n);
	while(strt->Next->info==n)
	{
			if(strt->Next)
			{
				strt = strt->Next;	
			}
	}
				temp->Next=strt->Next;
				strt->Next=temp;
				temp->info=k;        
				printf("info of the new node %d \n",k);
return k;
}
@


1.10
log
@*** empty log message ***
@
text
@d15 1
a15 1
				strt = strt->Next	
@


1.9
log
@*** empty log message ***
@
text
@d9 1
a9 1
	printf("give the after which the new node to be inserted\n");
d13 5
a17 3
		strt=strt->Next;
			if(strt->Next->info==n)
			{	
a21 7
			}
			else
			{
				printf("posiotion of key is not found in the list\n");
				break;
			}
	}
@


1.8
log
@*** empty log message ***
@
text
@d11 1
a11 1
	while(strt->Next)
a12 1
		i++;
a19 1
	//			k++;
d23 1
@


1.7
log
@*** empty log message ***
@
text
@d23 4
@


1.6
log
@*** empty log message ***
@
text
@d21 1
a21 1
				k++;
@


1.5
log
@*** empty log message ***
@
text
@a2 1
int k = 500;
d7 1
@


1.4
log
@*** empty log message ***
@
text
@d4 1
a4 1
int insertatnth(struct node *strt)
@


1.3
log
@insertion after the key is also implemented.
@
text
@d19 1
a19 1
				temp->info=l;        
@


1.2
log
@*** empty log message ***
@
text
@d3 2
a4 1
int insertkey(struct node *strt)
d6 19
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
int insertkey(Node *strt)
@
